{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","freqs","myCanvas","document","getElementById","ctx","getContext","navigator","mediaDevices","enumerateDevices","then","devices","forEach","d","i","console","log","label","getUserMedia","audio","deviceId","stream","context","window","AudioContext","webkitAudioContext","analyser","createAnalyser","createMediaStreamSource","connect","destination","Uint8Array","frequencyBinCount","requestAnimationFrame","draw","fillStyle","fillRect","width","height","beginPath","arc","Math","PI","stroke","getByteFrequencyData","font","avg","Array","keys","reduce","acc","curr","textAlign","textBaseline","fillText","radians","bar_height","x","cos","y","sin","x_end","y_end","color","strokeStyle","lineWidth","moveTo","lineTo","className","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wLAAe,I,YCgGAA,MA7Ff,WAsFE,OArFAC,qBAAU,WACR,IAGIC,EAHEC,EAAWC,SAASC,eAAe,YACnCC,EAAMH,EAASI,WAAW,MAIhCC,UAAUC,aAAaC,mBAAmBC,MAAK,SAAAC,GAC7CA,EAAQC,SAAQ,SAACC,EAAGC,GAAJ,OAAUC,QAAQC,IAAIH,EAAEI,MAAOH,MAC/CP,UAAUC,aACPU,aAAa,CACZC,MAAO,CACLC,SAAU,0BAGbV,MAAK,SAAAW,GACJ,IAAMC,EAAU,IAAKC,OAAOC,cAAgBD,OAAOE,oBAC7CC,EAAWJ,EAAQK,iBACVL,EAAQM,wBAAwBP,GACxCQ,QAAQH,GACfA,EAASG,QAAQP,EAAQQ,aAEzB7B,EAAQ,IAAI8B,WAAWL,EAASM,mBAyDhCC,uBAvDA,SAASC,IAKP7B,EAAI8B,UAAY,QAChB9B,EAAI+B,SAAS,EAAG,EAAGlC,EAASmC,MAAOnC,EAASoC,QAG5CjC,EAAIkC,YACJlC,EAAImC,IACFtC,EAASmC,MAAQ,EACjBnC,EAASoC,OAAS,EAXP,GAaX,EACA,EAAIG,KAAKC,IAEXrC,EAAIsC,SACJjB,EAASkB,qBAAqB3C,GAG9BI,EAAIwC,KAAO,0BACX,IAAMC,EACJ,YAAIC,MAAM,KAAKC,QAAQC,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMjD,EAAMkD,KAAO,GAChE,IACF9C,EAAI8B,UAAY,aAAuB,IAAMW,GAAO,KAAOA,EAAM,IACjEzC,EAAI+C,UAAY,SAChB/C,EAAIgD,aAAe,MACnBhD,EAAIiD,SAAS,QAASpD,EAASmC,MAAQ,EAAGnC,EAASoC,OAAS,EAAI,IAChEjC,EAAIiD,SAAS,MAAOpD,EAASmC,MAAQ,EAAGnC,EAASoC,OAAS,EAAI,GAG9D,IAAK,IAAIxB,EAAI,EAAGA,EA9BL,IA8BeA,IAAK,CAC7B,IAAIyC,EAAqB,EAAVd,KAAKC,GA/BX,IAgCLc,EAAwB,GAAXvD,EAAMa,GAEnB2C,EAAIvD,EAASmC,MAAQ,EAnCd,GAmCkBI,KAAKiB,IAAIH,EAAUzC,GAC5C6C,EAAIzD,EAASoC,OAAS,EApCf,GAoCmBG,KAAKmB,IAAIL,EAAUzC,GAC7C+C,EACF3D,EAASmC,MAAQ,EAAII,KAAKiB,IAAIH,EAAUzC,IAtC/B,GAsC8C0C,GACrDM,EACF5D,EAASoC,OAAS,EAAIG,KAAKmB,IAAIL,EAAUzC,IAxChC,GAwC+C0C,GACtDO,EACF,aAAuB,IAAM9D,EAAMa,IAAM,KAAOb,EAAMa,GAAK,IAC7DT,EAAI2D,YAAcD,EAClB1D,EAAI4D,UAAY,EAChB5D,EAAIkC,YACJlC,EAAI6D,OAAOT,EAAGE,GACdtD,EAAI8D,OAAON,EAAOC,GAClBzD,EAAIsC,SAGNV,sBAAsBC,cAO7B,IAID,qBAAKkC,UAAU,MAAf,SACE,wBAAQC,GAAG,WAAWhC,MAAM,MAAMC,OAAO,WC/EhCgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9D,MAAK,YAAkD,IAA/C+D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7E,SAASC,eAAe,SAM1BkE,K","file":"static/js/main.7ad6a8a7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect } from 'react';\nfunction App() {\n  useEffect(() => {\n    const myCanvas = document.getElementById(\"myCanvas\");\n    const ctx = myCanvas.getContext(\"2d\");\n\n    let freqs;\n\n    navigator.mediaDevices.enumerateDevices().then(devices => {\n      devices.forEach((d, i) => console.log(d.label, i));\n      navigator.mediaDevices\n        .getUserMedia({\n          audio: {\n            deviceId: 'devices[17].deviceId'\n          }\n        })\n        .then(stream => {\n          const context = new (window.AudioContext || window.webkitAudioContext)();\n          const analyser = context.createAnalyser();\n          const source = context.createMediaStreamSource(stream);\n          source.connect(analyser);\n          analyser.connect(context.destination);\n\n          freqs = new Uint8Array(analyser.frequencyBinCount);\n\n          function draw() {\n            let radius = 75;\n            let bars = 100;\n\n            // Draw Background\n            ctx.fillStyle = \"black\";\n            ctx.fillRect(0, 0, myCanvas.width, myCanvas.height);\n\n            // Draw circle\n            ctx.beginPath();\n            ctx.arc(\n              myCanvas.width / 2,\n              myCanvas.height / 2,\n              radius,\n              0,\n              2 * Math.PI\n            );\n            ctx.stroke();\n            analyser.getByteFrequencyData(freqs);\n\n            // Draw label\n            ctx.font = \"500 24px Helvetica Neue\";\n            const avg =\n              [...Array(255).keys()].reduce((acc, curr) => acc + freqs[curr], 0) /\n              255;\n            ctx.fillStyle = \"rgb(\" + 200 + \", \" + (200 - avg) + \", \" + avg + \")\";\n            ctx.textAlign = \"center\";\n            ctx.textBaseline = \"top\";\n            ctx.fillText(\"DOTAN\", myCanvas.width / 2, myCanvas.height / 2 - 24);\n            ctx.fillText(\"AVI\", myCanvas.width / 2, myCanvas.height / 2 + 6);\n\n            // Draw bars\n            for (var i = 0; i < bars; i++) {\n              let radians = (Math.PI * 2) / bars;\n              let bar_height = freqs[i] * 0.5;\n\n              let x = myCanvas.width / 2 + Math.cos(radians * i) * radius;\n              let y = myCanvas.height / 2 + Math.sin(radians * i) * radius;\n              let x_end =\n                myCanvas.width / 2 + Math.cos(radians * i) * (radius + bar_height);\n              let y_end =\n                myCanvas.height / 2 + Math.sin(radians * i) * (radius + bar_height);\n              let color =\n                \"rgb(\" + 200 + \", \" + (200 - freqs[i]) + \", \" + freqs[i] + \")\";\n              ctx.strokeStyle = color;\n              ctx.lineWidth = 3;\n              ctx.beginPath();\n              ctx.moveTo(x, y);\n              ctx.lineTo(x_end, y_end);\n              ctx.stroke();\n            }\n\n            requestAnimationFrame(draw);\n          }\n\n          requestAnimationFrame(draw);\n        });\n    });\n\n  }, [])\n\n\n  return (\n    <div className=\"App\">\n      <canvas id=\"myCanvas\" width=\"400\" height=\"400\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}